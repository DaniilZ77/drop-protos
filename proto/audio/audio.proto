syntax = "proto3";

package audio;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protovalidate/validate.proto";

option go_package = "github.com/MAXXXIMUS-tropical-milkshake/beatflow-protos;audiov1";

service BeatService {
  rpc UploadBeat(UploadBeatRequest) returns (UploadBeatResponse) {
    option (google.api.http) = {
      post: "/v1/beat"
      body: "*"
    };
  }
  rpc GetBeats(GetBeatsRequest) returns (GetBeatsResponse) {
    option (google.api.http) = {get: "/v1/beats"};
  }
  rpc UpdateBeat(UpdateBeatRequest) returns (UpdateBeatResponse) {
    option (google.api.http) = {
      patch: "/v1/beats/{beat_id}"
      body: "*"
    };
  }
  rpc DeleteBeat(DeleteBeatRequest) returns (DeleteBeatResponse) {
    option (google.api.http) = {delete: "/v1/beats/{beat_id}"};
  }
  rpc GetBeatParams(GetBeatParamsRequest) returns (GetBeatParamsResponse) {
    option (google.api.http) = {get: "/v1/beat/params"};
  }
  rpc AcquireBeat(AcquireBeatRequest) returns (AcquireBeatResponse) {
    option (google.api.http) = {
      post: "/v1/beats/{beat_id}/acquire"
      body: "*"
    };
  }
  rpc Health(HealthRequest) returns (HealthResponse) {
    option (google.api.http) = {get: "/health"};
  }
}

enum Scale {
  MINOR = 0;
  MAJOR = 1;
}

message UploadBeatNote {
  string note_id = 1 [(buf.validate.field).string.uuid = true];
  Scale scale = 2;
}

message Range {
  option (buf.validate.message).cel = {
    id: "start_le_end"
    message: "start must be less than or equal end"
    expression: "this.start <= this.end && this.start >= 0"
  };

  int64 start = 1;
  int64 end = 2;
}

message UploadBeatRequest {
  string beat_id = 1 [(buf.validate.field).string.uuid = true];
  string beatmaker_id = 2 [(buf.validate.field).string.uuid = true];
  string name = 3 [(buf.validate.field).string = {
    min_len: 1
    max_len: 30
  }];
  string description = 4 [(buf.validate.field).string.max_len = 500];
  repeated string beat_genre = 5 [(buf.validate.field).repeated = {
    unique: true
    max_items: 20
    items: {
      string: {uuid: true}
    }
  }];
  repeated string beat_tag = 6 [(buf.validate.field).repeated = {
    unique: true
    max_items: 20
    items: {
      string: {uuid: true}
    }
  }];
  repeated string beat_mood = 7 [(buf.validate.field).repeated = {
    unique: true
    max_items: 20
    items: {
      string: {uuid: true}
    }
  }];
  UploadBeatNote note = 8 [(buf.validate.field).required = true];
  int64 bpm = 9 [(buf.validate.field).int64 = {
    gt: 9
    lte: 600
  }];
  Range range = 10 [(buf.validate.field).required = true];
}

message UploadBeatResponse {
  string file_upload_url = 1;
  string image_upload_url = 2;
  string archive_upload_url = 3;
}

message Beatmaker {
  string id = 1;
  string username = 2;
  string pseudonym = 3;
}

enum Order {
  ASC = 0;
  DESC = 1;
}

message OrderBy {
  string order = 1 [(buf.validate.field).cel = {
    id: "order_by_order_must_be_valid"
    message: "the order must be one of asc or desc"
    expression: "this in ['asc', 'desc']"
  }];
  string field = 2 [(buf.validate.field).cel = {
    id: "order_by_field_must_be_valid"
    message: "the field must be one of name, created_at or bpm"
    expression: "this in ['name', 'created_at', 'bpm']"
  }];
}

message GetBeatsNote {
  string name = 1 [(buf.validate.field).string = {
    min_len: 1
    max_len: 30
  }];
  Scale scale = 2;
}

message GetBeatsRequest {
  optional string beat_id = 1 [(buf.validate.field).string.uuid = true];
  repeated string genre = 2 [(buf.validate.field).repeated = {
    unique: true
    max_items: 20
    items: {
      string: {
        min_len: 1
        max_len: 100
      }
    }
  }];
  repeated string mood = 3 [(buf.validate.field).repeated = {
    unique: true
    max_items: 20
    items: {
      string: {
        min_len: 1
        max_len: 100
      }
    }
  }];
  repeated string tag = 4 [(buf.validate.field).repeated = {
    unique: true
    max_items: 20
    items: {
      string: {
        min_len: 1
        max_len: 100
      }
    }
  }];

  optional GetBeatsNote note = 5;
  optional string beatmaker_id = 6 [(buf.validate.field).string.uuid = true];
  optional string beat_name = 7 [(buf.validate.field).string = {
    min_len: 1
    max_len: 30
  }];
  optional int64 bpm = 8 [(buf.validate.field).int64 = {
    gt: 9
    lte: 600
  }];
  optional OrderBy order_by = 9;
  int64 limit = 10 [(buf.validate.field).int64 = {
    gt: 0
    lte: 100
  }];
  int64 offset = 11 [(buf.validate.field).int64.gte = 0];
  optional bool is_downloaded = 12;
}

message Beat {
  string beat_id = 1;
  Beatmaker beatmaker = 2;
  string image_download_url = 3;
  string name = 4;
  string description = 5;
  repeated string genre = 6;
  repeated string tag = 7;
  repeated string mood = 8;
  GetBeatsNote note = 9;
  int64 bpm = 10;
  Range range = 11;
  bool is_file_uploaded = 12;
  bool is_image_uploaded = 13;
  bool is_archive_uploaded = 14;
  google.protobuf.Timestamp created_at = 15;
}

message Pagination {
  int64 pages = 1;
  int64 cur_page = 2;
  int64 records = 3;
  int64 records_per_page = 4;
}

message GetBeatsResponse {
  Pagination pagination = 1;
  repeated Beat beats = 2;
}

message GetBeatParamsRequest {}

message GetBeatParamsResponse {
  repeated GenreParam genres = 1;
  repeated TagParam tags = 2;
  repeated MoodParam moods = 3;
  repeated NoteParam notes = 4;
}

message GenreParam {
  string genre_id = 1;
  string name = 2;
}

message TagParam {
  string tag_id = 1;
  string name = 2;
}

message MoodParam {
  string mood_id = 1;
  string name = 2;
}

message NoteParam {
  string note_id = 1;
  string name = 2;
}

message UpdateBeatNote {
  string note_id = 1 [(buf.validate.field).string.uuid = true];
  Scale scale = 2;
}

message UpdateBeatRequest {
  string beat_id = 1 [(buf.validate.field).string.uuid = true];
  optional string name = 2 [(buf.validate.field).string = {
    min_len: 1
    max_len: 30
  }];
  optional string description = 3 [(buf.validate.field).string.max_len = 500];
  repeated string beat_genre = 4 [(buf.validate.field).repeated = {
    unique: true
    max_items: 20
    items: {
      string: {uuid: true}
    }
  }];
  repeated string beat_tag = 5 [(buf.validate.field).repeated = {
    unique: true
    max_items: 20
    items: {
      string: {uuid: true}
    }
  }];
  repeated string beat_mood = 6 [(buf.validate.field).repeated = {
    unique: true
    max_items: 20
    items: {
      string: {uuid: true}
    }
  }];
  optional UpdateBeatNote note = 7;
  optional int64 bpm = 8 [(buf.validate.field).int64 = {
    gt: 9
    lte: 600
  }];
  optional bool update_image = 9;
  optional bool update_file = 10;
  optional bool update_archive = 11;
  optional Range range = 12;
}

message DeleteBeatRequest {
  string beat_id = 1 [(buf.validate.field).string.uuid = true];
}

message DeleteBeatResponse {}

message UpdateBeatResponse {
  optional string file_upload_url = 1;
  optional string image_upload_url = 2;
  optional string archive_upload_url = 3;
}

message AcquireBeatRequest {
  string beat_id = 1 [(buf.validate.field).string.uuid = true];
  string user_id = 2 [(buf.validate.field).string.uuid = true];
}

message AcquireBeatResponse {
  string archive_download_url = 1;
}

message HealthRequest {}
message HealthResponse {
  string message = 1;
}
