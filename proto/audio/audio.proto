syntax = "proto3";

package audio;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protovalidate/validate.proto";

option go_package = "github.com/MAXXXIMUS-tropical-milkshake/beatflow-protos;audiov1";

service BeatService {
  rpc UploadBeat(UploadBeatRequest) returns (UploadBeatResponse) {
    option (google.api.http) = {
      post: "/v1/beat"
      body: "*"
    };
  }
  rpc GetBeats(GetBeatsRequest) returns (GetBeatsResponse) {
    option (google.api.http) = {get: "/v1/beats"};
  }
  rpc GetBeatParams(GetBeatParamsRequest) returns (GetBeatParamsResponse) {
    option (google.api.http) = {get: "/v1/beat/params"};
  }
}

enum Scale {
  MINOR = 0;
  MAJOR = 1;
}

message Note {
  string name = 1;
  Scale scale = 2;
}

message UploadBeatRequest {
  option (buf.validate.message).cel = {
    id: "beat_genre_positive"
    message: "all genre ids must be positive"
    expression: "this.beat_genre.all(m, m > 0)"
  };

  option (buf.validate.message).cel = {
    id: "beat_tag_positive"
    message: "all tag ids must be positive"
    expression: "this.beat_tag.all(m, m > 0)"
  };

  option (buf.validate.message).cel = {
    id: "beat_mood_positive"
    message: "all mood ids must be positive"
    expression: "this.beat_mood.all(m, m > 0)"
  };

  option (buf.validate.message).cel = {
    id: "note_name_not_empty"
    message: "note name must be not empty"
    expression: "this.note.name.size() > 0"
  };

  int64 beat_id = 1 [(buf.validate.field).int64.gt = 0];
  int64 beatmaker_id = 2 [(buf.validate.field).int64.gt = 0];
  string name = 3 [(buf.validate.field).string = {
    min_len: 1
    max_len: 30
  }];
  string description = 4 [(buf.validate.field).string.max_len = 500];
  repeated int64 beat_genre = 5;
  repeated int64 beat_tag = 6;
  repeated int64 beat_mood = 7;
  Note note = 8;
  int64 bpm = 9 [(buf.validate.field).int64 = {
    gt: 9
    lte: 600
  }];
}

message UploadBeatResponse {
  string file_upload_url = 1;
  string image_upload_url = 2;
}

message Beatmaker {
  int64 id = 1;
  string username = 2;
  string pseudonym = 3;
}

enum Order {
  ASC = 0;
  DESC = 1;
}

message OrderBy {
  Order order = 1;
  string field = 2;
}

message GetBeatsRequest {
  option (buf.validate.message).cel = {
    id: "genre_positive"
    message: "all genre ids must be positive"
    expression: "this.genre.all(m, m > 0)"
  };

  option (buf.validate.message).cel = {
    id: "tag_positive"
    message: "all tag ids must be positive"
    expression: "this.tag.all(m, m > 0)"
  };

  option (buf.validate.message).cel = {
    id: "mood_positive"
    message: "all mood ids must be positive"
    expression: "this.mood.all(m, m > 0)"
  };

  option (buf.validate.message).cel = {
    id: "note_name_not_empty"
    message: "note name must be not empty"
    expression: "this.note.name.size() > 0"
  };

  option (buf.validate.message).cel = {
    id: "order_by_field_not_empty"
    message: "order by field must be not empty"
    expression: "this.order_by.field.size() > 0"
  };

  optional int64 beat_id = 1 [(buf.validate.field).int64.gt = 0];
  repeated string genre = 2;
  repeated string mood = 3;
  repeated string tag = 4;
  optional Note note = 5;
  optional int64 beatmaker_id = 6 [(buf.validate.field).int64.gt = 0];
  optional string beat_name = 7 [(buf.validate.field).string = {
    min_len: 1
    max_len: 30
  }];
  optional int64 bpm = 8 [(buf.validate.field).int64 = {
    gt: 9
    lte: 600
  }];
  optional OrderBy order_by = 9;
  optional int64 limit = 10 [(buf.validate.field).int64 = {
    gt: 0
    lte: 100
  }];
  optional int64 offset = 11 [(buf.validate.field).int64.gte = 0];
}

message Beat {
  int64 beat_id = 1;
  Beatmaker beatmaker = 2;
  string image = 3;
  string name = 4;
  string description = 5;
  repeated string genre = 6;
  repeated string tag = 7;
  repeated string mood = 8;
  Note note = 9;
  int64 bpm = 10;
  google.protobuf.Timestamp created_at = 11;
}

message Pagination {
  int64 pages = 1;
  int64 cur_page = 2;
  int64 records = 3;
  int64 records_per_page = 4;
}

message GetBeatsResponse {
  Pagination pagination = 1;
  repeated Beat beats = 2;
}

message GetBeatParamsRequest {}

message GetBeatParamsResponse {
  repeated GenreParam genres = 1;
  repeated TagParam tags = 2;
  repeated MoodParam moods = 3;
  repeated NoteParam notes = 4;
}

message GenreParam {
  int64 genre_id = 1;
  string name = 2;
}

message TagParam {
  int64 tag_id = 1;
  string name = 2;
}

message MoodParam {
  int64 mood_id = 1;
  string name = 2;
}

message NoteParam {
  int64 note_id = 1;
  string name = 2;
}
