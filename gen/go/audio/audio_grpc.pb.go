// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: audio/audio.proto

package audiov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BeatService_UploadBeat_FullMethodName        = "/audio.BeatService/UploadBeat"
	BeatService_GetBeat_FullMethodName           = "/audio.BeatService/GetBeat"
	BeatService_GetRandomBeat_FullMethodName     = "/audio.BeatService/GetRandomBeat"
	BeatService_GetBeatmakerBeats_FullMethodName = "/audio.BeatService/GetBeatmakerBeats"
	BeatService_GetBeatParams_FullMethodName     = "/audio.BeatService/GetBeatParams"
)

// BeatServiceClient is the client API for BeatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeatServiceClient interface {
	UploadBeat(ctx context.Context, in *UploadBeatRequest, opts ...grpc.CallOption) (*UploadBeatResponse, error)
	GetBeat(ctx context.Context, in *GetBeatRequest, opts ...grpc.CallOption) (*GetBeatResponse, error)
	GetRandomBeat(ctx context.Context, in *GetRandomBeatRequest, opts ...grpc.CallOption) (*GetRandomBeatResponse, error)
	GetBeatmakerBeats(ctx context.Context, in *GetBeatmakerBeatsRequest, opts ...grpc.CallOption) (*GetBeatmakerBeatsResponse, error)
	GetBeatParams(ctx context.Context, in *GetBeatParamsRequest, opts ...grpc.CallOption) (*GetBeatParamsResponse, error)
}

type beatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBeatServiceClient(cc grpc.ClientConnInterface) BeatServiceClient {
	return &beatServiceClient{cc}
}

func (c *beatServiceClient) UploadBeat(ctx context.Context, in *UploadBeatRequest, opts ...grpc.CallOption) (*UploadBeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadBeatResponse)
	err := c.cc.Invoke(ctx, BeatService_UploadBeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beatServiceClient) GetBeat(ctx context.Context, in *GetBeatRequest, opts ...grpc.CallOption) (*GetBeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBeatResponse)
	err := c.cc.Invoke(ctx, BeatService_GetBeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beatServiceClient) GetRandomBeat(ctx context.Context, in *GetRandomBeatRequest, opts ...grpc.CallOption) (*GetRandomBeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRandomBeatResponse)
	err := c.cc.Invoke(ctx, BeatService_GetRandomBeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beatServiceClient) GetBeatmakerBeats(ctx context.Context, in *GetBeatmakerBeatsRequest, opts ...grpc.CallOption) (*GetBeatmakerBeatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBeatmakerBeatsResponse)
	err := c.cc.Invoke(ctx, BeatService_GetBeatmakerBeats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beatServiceClient) GetBeatParams(ctx context.Context, in *GetBeatParamsRequest, opts ...grpc.CallOption) (*GetBeatParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBeatParamsResponse)
	err := c.cc.Invoke(ctx, BeatService_GetBeatParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeatServiceServer is the server API for BeatService service.
// All implementations must embed UnimplementedBeatServiceServer
// for forward compatibility.
type BeatServiceServer interface {
	UploadBeat(context.Context, *UploadBeatRequest) (*UploadBeatResponse, error)
	GetBeat(context.Context, *GetBeatRequest) (*GetBeatResponse, error)
	GetRandomBeat(context.Context, *GetRandomBeatRequest) (*GetRandomBeatResponse, error)
	GetBeatmakerBeats(context.Context, *GetBeatmakerBeatsRequest) (*GetBeatmakerBeatsResponse, error)
	GetBeatParams(context.Context, *GetBeatParamsRequest) (*GetBeatParamsResponse, error)
	mustEmbedUnimplementedBeatServiceServer()
}

// UnimplementedBeatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBeatServiceServer struct{}

func (UnimplementedBeatServiceServer) UploadBeat(context.Context, *UploadBeatRequest) (*UploadBeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadBeat not implemented")
}
func (UnimplementedBeatServiceServer) GetBeat(context.Context, *GetBeatRequest) (*GetBeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeat not implemented")
}
func (UnimplementedBeatServiceServer) GetRandomBeat(context.Context, *GetRandomBeatRequest) (*GetRandomBeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomBeat not implemented")
}
func (UnimplementedBeatServiceServer) GetBeatmakerBeats(context.Context, *GetBeatmakerBeatsRequest) (*GetBeatmakerBeatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeatmakerBeats not implemented")
}
func (UnimplementedBeatServiceServer) GetBeatParams(context.Context, *GetBeatParamsRequest) (*GetBeatParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeatParams not implemented")
}
func (UnimplementedBeatServiceServer) mustEmbedUnimplementedBeatServiceServer() {}
func (UnimplementedBeatServiceServer) testEmbeddedByValue()                     {}

// UnsafeBeatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeatServiceServer will
// result in compilation errors.
type UnsafeBeatServiceServer interface {
	mustEmbedUnimplementedBeatServiceServer()
}

func RegisterBeatServiceServer(s grpc.ServiceRegistrar, srv BeatServiceServer) {
	// If the following call pancis, it indicates UnimplementedBeatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BeatService_ServiceDesc, srv)
}

func _BeatService_UploadBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatServiceServer).UploadBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatService_UploadBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatServiceServer).UploadBeat(ctx, req.(*UploadBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeatService_GetBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatServiceServer).GetBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatService_GetBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatServiceServer).GetBeat(ctx, req.(*GetBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeatService_GetRandomBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatServiceServer).GetRandomBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatService_GetRandomBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatServiceServer).GetRandomBeat(ctx, req.(*GetRandomBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeatService_GetBeatmakerBeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBeatmakerBeatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatServiceServer).GetBeatmakerBeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatService_GetBeatmakerBeats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatServiceServer).GetBeatmakerBeats(ctx, req.(*GetBeatmakerBeatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeatService_GetBeatParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBeatParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeatServiceServer).GetBeatParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeatService_GetBeatParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeatServiceServer).GetBeatParams(ctx, req.(*GetBeatParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BeatService_ServiceDesc is the grpc.ServiceDesc for BeatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "audio.BeatService",
	HandlerType: (*BeatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadBeat",
			Handler:    _BeatService_UploadBeat_Handler,
		},
		{
			MethodName: "GetBeat",
			Handler:    _BeatService_GetBeat_Handler,
		},
		{
			MethodName: "GetRandomBeat",
			Handler:    _BeatService_GetRandomBeat_Handler,
		},
		{
			MethodName: "GetBeatmakerBeats",
			Handler:    _BeatService_GetBeatmakerBeats_Handler,
		},
		{
			MethodName: "GetBeatParams",
			Handler:    _BeatService_GetBeatParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "audio/audio.proto",
}
