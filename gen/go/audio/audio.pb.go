// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.1
// source: audio/audio.proto

package audiov1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Scale int32

const (
	Scale_MINOR Scale = 0
	Scale_MAJOR Scale = 1
)

// Enum value maps for Scale.
var (
	Scale_name = map[int32]string{
		0: "MINOR",
		1: "MAJOR",
	}
	Scale_value = map[string]int32{
		"MINOR": 0,
		"MAJOR": 1,
	}
)

func (x Scale) Enum() *Scale {
	p := new(Scale)
	*p = x
	return p
}

func (x Scale) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scale) Descriptor() protoreflect.EnumDescriptor {
	return file_audio_audio_proto_enumTypes[0].Descriptor()
}

func (Scale) Type() protoreflect.EnumType {
	return &file_audio_audio_proto_enumTypes[0]
}

func (x Scale) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Scale.Descriptor instead.
func (Scale) EnumDescriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{0}
}

type Order int32

const (
	Order_ASC  Order = 0
	Order_DESC Order = 1
)

// Enum value maps for Order.
var (
	Order_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	Order_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x Order) Enum() *Order {
	p := new(Order)
	*p = x
	return p
}

func (x Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order) Descriptor() protoreflect.EnumDescriptor {
	return file_audio_audio_proto_enumTypes[1].Descriptor()
}

func (Order) Type() protoreflect.EnumType {
	return &file_audio_audio_proto_enumTypes[1]
}

func (x Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order.Descriptor instead.
func (Order) EnumDescriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{1}
}

type UploadBeatNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteId string `protobuf:"bytes,1,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	Scale  Scale  `protobuf:"varint,2,opt,name=scale,proto3,enum=audio.Scale" json:"scale,omitempty"`
}

func (x *UploadBeatNote) Reset() {
	*x = UploadBeatNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadBeatNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadBeatNote) ProtoMessage() {}

func (x *UploadBeatNote) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadBeatNote.ProtoReflect.Descriptor instead.
func (*UploadBeatNote) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{0}
}

func (x *UploadBeatNote) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

func (x *UploadBeatNote) GetScale() Scale {
	if x != nil {
		return x.Scale
	}
	return Scale_MINOR
}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{1}
}

func (x *Range) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Range) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type UploadBeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeatId      string          `protobuf:"bytes,1,opt,name=beat_id,json=beatId,proto3" json:"beat_id,omitempty"`
	BeatmakerId string          `protobuf:"bytes,2,opt,name=beatmaker_id,json=beatmakerId,proto3" json:"beatmaker_id,omitempty"`
	Name        string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string          `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	BeatGenre   []string        `protobuf:"bytes,5,rep,name=beat_genre,json=beatGenre,proto3" json:"beat_genre,omitempty"`
	BeatTag     []string        `protobuf:"bytes,6,rep,name=beat_tag,json=beatTag,proto3" json:"beat_tag,omitempty"`
	BeatMood    []string        `protobuf:"bytes,7,rep,name=beat_mood,json=beatMood,proto3" json:"beat_mood,omitempty"`
	Note        *UploadBeatNote `protobuf:"bytes,8,opt,name=note,proto3" json:"note,omitempty"`
	Bpm         int64           `protobuf:"varint,9,opt,name=bpm,proto3" json:"bpm,omitempty"`
	Range       *Range          `protobuf:"bytes,10,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *UploadBeatRequest) Reset() {
	*x = UploadBeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadBeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadBeatRequest) ProtoMessage() {}

func (x *UploadBeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadBeatRequest.ProtoReflect.Descriptor instead.
func (*UploadBeatRequest) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{2}
}

func (x *UploadBeatRequest) GetBeatId() string {
	if x != nil {
		return x.BeatId
	}
	return ""
}

func (x *UploadBeatRequest) GetBeatmakerId() string {
	if x != nil {
		return x.BeatmakerId
	}
	return ""
}

func (x *UploadBeatRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadBeatRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UploadBeatRequest) GetBeatGenre() []string {
	if x != nil {
		return x.BeatGenre
	}
	return nil
}

func (x *UploadBeatRequest) GetBeatTag() []string {
	if x != nil {
		return x.BeatTag
	}
	return nil
}

func (x *UploadBeatRequest) GetBeatMood() []string {
	if x != nil {
		return x.BeatMood
	}
	return nil
}

func (x *UploadBeatRequest) GetNote() *UploadBeatNote {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *UploadBeatRequest) GetBpm() int64 {
	if x != nil {
		return x.Bpm
	}
	return 0
}

func (x *UploadBeatRequest) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

type UploadBeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileUploadUrl    string `protobuf:"bytes,1,opt,name=file_upload_url,json=fileUploadUrl,proto3" json:"file_upload_url,omitempty"`
	ImageUploadUrl   string `protobuf:"bytes,2,opt,name=image_upload_url,json=imageUploadUrl,proto3" json:"image_upload_url,omitempty"`
	ArchiveUploadUrl string `protobuf:"bytes,3,opt,name=archive_upload_url,json=archiveUploadUrl,proto3" json:"archive_upload_url,omitempty"`
}

func (x *UploadBeatResponse) Reset() {
	*x = UploadBeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadBeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadBeatResponse) ProtoMessage() {}

func (x *UploadBeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadBeatResponse.ProtoReflect.Descriptor instead.
func (*UploadBeatResponse) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{3}
}

func (x *UploadBeatResponse) GetFileUploadUrl() string {
	if x != nil {
		return x.FileUploadUrl
	}
	return ""
}

func (x *UploadBeatResponse) GetImageUploadUrl() string {
	if x != nil {
		return x.ImageUploadUrl
	}
	return ""
}

func (x *UploadBeatResponse) GetArchiveUploadUrl() string {
	if x != nil {
		return x.ArchiveUploadUrl
	}
	return ""
}

type Beatmaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username  string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Pseudonym string `protobuf:"bytes,3,opt,name=pseudonym,proto3" json:"pseudonym,omitempty"`
}

func (x *Beatmaker) Reset() {
	*x = Beatmaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Beatmaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Beatmaker) ProtoMessage() {}

func (x *Beatmaker) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Beatmaker.ProtoReflect.Descriptor instead.
func (*Beatmaker) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{4}
}

func (x *Beatmaker) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Beatmaker) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Beatmaker) GetPseudonym() string {
	if x != nil {
		return x.Pseudonym
	}
	return ""
}

type OrderBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order Order  `protobuf:"varint,1,opt,name=order,proto3,enum=audio.Order" json:"order,omitempty"`
	Field string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *OrderBy) Reset() {
	*x = OrderBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBy) ProtoMessage() {}

func (x *OrderBy) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBy.ProtoReflect.Descriptor instead.
func (*OrderBy) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{5}
}

func (x *OrderBy) GetOrder() Order {
	if x != nil {
		return x.Order
	}
	return Order_ASC
}

func (x *OrderBy) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

type GetBeatsNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Scale Scale  `protobuf:"varint,2,opt,name=scale,proto3,enum=audio.Scale" json:"scale,omitempty"`
}

func (x *GetBeatsNote) Reset() {
	*x = GetBeatsNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBeatsNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBeatsNote) ProtoMessage() {}

func (x *GetBeatsNote) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBeatsNote.ProtoReflect.Descriptor instead.
func (*GetBeatsNote) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{6}
}

func (x *GetBeatsNote) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetBeatsNote) GetScale() Scale {
	if x != nil {
		return x.Scale
	}
	return Scale_MINOR
}

type GetBeatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeatId       *string       `protobuf:"bytes,1,opt,name=beat_id,json=beatId,proto3,oneof" json:"beat_id,omitempty"`
	Genre        []string      `protobuf:"bytes,2,rep,name=genre,proto3" json:"genre,omitempty"`
	Mood         []string      `protobuf:"bytes,3,rep,name=mood,proto3" json:"mood,omitempty"`
	Tag          []string      `protobuf:"bytes,4,rep,name=tag,proto3" json:"tag,omitempty"`
	Note         *GetBeatsNote `protobuf:"bytes,5,opt,name=note,proto3,oneof" json:"note,omitempty"`
	BeatmakerId  *string       `protobuf:"bytes,6,opt,name=beatmaker_id,json=beatmakerId,proto3,oneof" json:"beatmaker_id,omitempty"`
	BeatName     *string       `protobuf:"bytes,7,opt,name=beat_name,json=beatName,proto3,oneof" json:"beat_name,omitempty"`
	Bpm          *int64        `protobuf:"varint,8,opt,name=bpm,proto3,oneof" json:"bpm,omitempty"`
	OrderBy      *OrderBy      `protobuf:"bytes,9,opt,name=order_by,json=orderBy,proto3,oneof" json:"order_by,omitempty"`
	Limit        int64         `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset       int64         `protobuf:"varint,11,opt,name=offset,proto3" json:"offset,omitempty"`
	IsDownloaded *bool         `protobuf:"varint,12,opt,name=is_downloaded,json=isDownloaded,proto3,oneof" json:"is_downloaded,omitempty"`
}

func (x *GetBeatsRequest) Reset() {
	*x = GetBeatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBeatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBeatsRequest) ProtoMessage() {}

func (x *GetBeatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBeatsRequest.ProtoReflect.Descriptor instead.
func (*GetBeatsRequest) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{7}
}

func (x *GetBeatsRequest) GetBeatId() string {
	if x != nil && x.BeatId != nil {
		return *x.BeatId
	}
	return ""
}

func (x *GetBeatsRequest) GetGenre() []string {
	if x != nil {
		return x.Genre
	}
	return nil
}

func (x *GetBeatsRequest) GetMood() []string {
	if x != nil {
		return x.Mood
	}
	return nil
}

func (x *GetBeatsRequest) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *GetBeatsRequest) GetNote() *GetBeatsNote {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *GetBeatsRequest) GetBeatmakerId() string {
	if x != nil && x.BeatmakerId != nil {
		return *x.BeatmakerId
	}
	return ""
}

func (x *GetBeatsRequest) GetBeatName() string {
	if x != nil && x.BeatName != nil {
		return *x.BeatName
	}
	return ""
}

func (x *GetBeatsRequest) GetBpm() int64 {
	if x != nil && x.Bpm != nil {
		return *x.Bpm
	}
	return 0
}

func (x *GetBeatsRequest) GetOrderBy() *OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *GetBeatsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetBeatsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetBeatsRequest) GetIsDownloaded() bool {
	if x != nil && x.IsDownloaded != nil {
		return *x.IsDownloaded
	}
	return false
}

type Beat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeatId            string                 `protobuf:"bytes,1,opt,name=beat_id,json=beatId,proto3" json:"beat_id,omitempty"`
	Beatmaker         *Beatmaker             `protobuf:"bytes,2,opt,name=beatmaker,proto3" json:"beatmaker,omitempty"`
	ImageDownloadUrl  string                 `protobuf:"bytes,3,opt,name=image_download_url,json=imageDownloadUrl,proto3" json:"image_download_url,omitempty"`
	Name              string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description       string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Genre             []string               `protobuf:"bytes,6,rep,name=genre,proto3" json:"genre,omitempty"`
	Tag               []string               `protobuf:"bytes,7,rep,name=tag,proto3" json:"tag,omitempty"`
	Mood              []string               `protobuf:"bytes,8,rep,name=mood,proto3" json:"mood,omitempty"`
	Note              *GetBeatsNote          `protobuf:"bytes,9,opt,name=note,proto3" json:"note,omitempty"`
	Bpm               int64                  `protobuf:"varint,10,opt,name=bpm,proto3" json:"bpm,omitempty"`
	Range             *Range                 `protobuf:"bytes,11,opt,name=range,proto3" json:"range,omitempty"`
	IsFileUploaded    bool                   `protobuf:"varint,12,opt,name=is_file_uploaded,json=isFileUploaded,proto3" json:"is_file_uploaded,omitempty"`
	IsImageUploaded   bool                   `protobuf:"varint,13,opt,name=is_image_uploaded,json=isImageUploaded,proto3" json:"is_image_uploaded,omitempty"`
	IsArchiveUploaded bool                   `protobuf:"varint,14,opt,name=is_archive_uploaded,json=isArchiveUploaded,proto3" json:"is_archive_uploaded,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Beat) Reset() {
	*x = Beat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Beat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Beat) ProtoMessage() {}

func (x *Beat) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Beat.ProtoReflect.Descriptor instead.
func (*Beat) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{8}
}

func (x *Beat) GetBeatId() string {
	if x != nil {
		return x.BeatId
	}
	return ""
}

func (x *Beat) GetBeatmaker() *Beatmaker {
	if x != nil {
		return x.Beatmaker
	}
	return nil
}

func (x *Beat) GetImageDownloadUrl() string {
	if x != nil {
		return x.ImageDownloadUrl
	}
	return ""
}

func (x *Beat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Beat) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Beat) GetGenre() []string {
	if x != nil {
		return x.Genre
	}
	return nil
}

func (x *Beat) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *Beat) GetMood() []string {
	if x != nil {
		return x.Mood
	}
	return nil
}

func (x *Beat) GetNote() *GetBeatsNote {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *Beat) GetBpm() int64 {
	if x != nil {
		return x.Bpm
	}
	return 0
}

func (x *Beat) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *Beat) GetIsFileUploaded() bool {
	if x != nil {
		return x.IsFileUploaded
	}
	return false
}

func (x *Beat) GetIsImageUploaded() bool {
	if x != nil {
		return x.IsImageUploaded
	}
	return false
}

func (x *Beat) GetIsArchiveUploaded() bool {
	if x != nil {
		return x.IsArchiveUploaded
	}
	return false
}

func (x *Beat) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pages          int64 `protobuf:"varint,1,opt,name=pages,proto3" json:"pages,omitempty"`
	CurPage        int64 `protobuf:"varint,2,opt,name=cur_page,json=curPage,proto3" json:"cur_page,omitempty"`
	Records        int64 `protobuf:"varint,3,opt,name=records,proto3" json:"records,omitempty"`
	RecordsPerPage int64 `protobuf:"varint,4,opt,name=records_per_page,json=recordsPerPage,proto3" json:"records_per_page,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{9}
}

func (x *Pagination) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *Pagination) GetCurPage() int64 {
	if x != nil {
		return x.CurPage
	}
	return 0
}

func (x *Pagination) GetRecords() int64 {
	if x != nil {
		return x.Records
	}
	return 0
}

func (x *Pagination) GetRecordsPerPage() int64 {
	if x != nil {
		return x.RecordsPerPage
	}
	return 0
}

type GetBeatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Beats      []*Beat     `protobuf:"bytes,2,rep,name=beats,proto3" json:"beats,omitempty"`
}

func (x *GetBeatsResponse) Reset() {
	*x = GetBeatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBeatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBeatsResponse) ProtoMessage() {}

func (x *GetBeatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBeatsResponse.ProtoReflect.Descriptor instead.
func (*GetBeatsResponse) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{10}
}

func (x *GetBeatsResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetBeatsResponse) GetBeats() []*Beat {
	if x != nil {
		return x.Beats
	}
	return nil
}

type GetBeatParamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBeatParamsRequest) Reset() {
	*x = GetBeatParamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBeatParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBeatParamsRequest) ProtoMessage() {}

func (x *GetBeatParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBeatParamsRequest.ProtoReflect.Descriptor instead.
func (*GetBeatParamsRequest) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{11}
}

type GetBeatParamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Genres []*GenreParam `protobuf:"bytes,1,rep,name=genres,proto3" json:"genres,omitempty"`
	Tags   []*TagParam   `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	Moods  []*MoodParam  `protobuf:"bytes,3,rep,name=moods,proto3" json:"moods,omitempty"`
	Notes  []*NoteParam  `protobuf:"bytes,4,rep,name=notes,proto3" json:"notes,omitempty"`
}

func (x *GetBeatParamsResponse) Reset() {
	*x = GetBeatParamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBeatParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBeatParamsResponse) ProtoMessage() {}

func (x *GetBeatParamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBeatParamsResponse.ProtoReflect.Descriptor instead.
func (*GetBeatParamsResponse) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{12}
}

func (x *GetBeatParamsResponse) GetGenres() []*GenreParam {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *GetBeatParamsResponse) GetTags() []*TagParam {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GetBeatParamsResponse) GetMoods() []*MoodParam {
	if x != nil {
		return x.Moods
	}
	return nil
}

func (x *GetBeatParamsResponse) GetNotes() []*NoteParam {
	if x != nil {
		return x.Notes
	}
	return nil
}

type GenreParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenreId string `protobuf:"bytes,1,opt,name=genre_id,json=genreId,proto3" json:"genre_id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GenreParam) Reset() {
	*x = GenreParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenreParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenreParam) ProtoMessage() {}

func (x *GenreParam) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenreParam.ProtoReflect.Descriptor instead.
func (*GenreParam) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{13}
}

func (x *GenreParam) GetGenreId() string {
	if x != nil {
		return x.GenreId
	}
	return ""
}

func (x *GenreParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TagParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId string `protobuf:"bytes,1,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TagParam) Reset() {
	*x = TagParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagParam) ProtoMessage() {}

func (x *TagParam) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagParam.ProtoReflect.Descriptor instead.
func (*TagParam) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{14}
}

func (x *TagParam) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *TagParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MoodParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoodId string `protobuf:"bytes,1,opt,name=mood_id,json=moodId,proto3" json:"mood_id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MoodParam) Reset() {
	*x = MoodParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoodParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoodParam) ProtoMessage() {}

func (x *MoodParam) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoodParam.ProtoReflect.Descriptor instead.
func (*MoodParam) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{15}
}

func (x *MoodParam) GetMoodId() string {
	if x != nil {
		return x.MoodId
	}
	return ""
}

func (x *MoodParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NoteParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteId string `protobuf:"bytes,1,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NoteParam) Reset() {
	*x = NoteParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteParam) ProtoMessage() {}

func (x *NoteParam) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteParam.ProtoReflect.Descriptor instead.
func (*NoteParam) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{16}
}

func (x *NoteParam) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

func (x *NoteParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateBeatNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteId string `protobuf:"bytes,1,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	Scale  Scale  `protobuf:"varint,2,opt,name=scale,proto3,enum=audio.Scale" json:"scale,omitempty"`
}

func (x *UpdateBeatNote) Reset() {
	*x = UpdateBeatNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBeatNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBeatNote) ProtoMessage() {}

func (x *UpdateBeatNote) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBeatNote.ProtoReflect.Descriptor instead.
func (*UpdateBeatNote) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateBeatNote) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

func (x *UpdateBeatNote) GetScale() Scale {
	if x != nil {
		return x.Scale
	}
	return Scale_MINOR
}

type UpdateBeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeatId        string          `protobuf:"bytes,1,opt,name=beat_id,json=beatId,proto3" json:"beat_id,omitempty"`
	Name          *string         `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description   *string         `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	BeatGenre     []string        `protobuf:"bytes,4,rep,name=beat_genre,json=beatGenre,proto3" json:"beat_genre,omitempty"`
	BeatTag       []string        `protobuf:"bytes,5,rep,name=beat_tag,json=beatTag,proto3" json:"beat_tag,omitempty"`
	BeatMood      []string        `protobuf:"bytes,6,rep,name=beat_mood,json=beatMood,proto3" json:"beat_mood,omitempty"`
	Note          *UpdateBeatNote `protobuf:"bytes,7,opt,name=note,proto3,oneof" json:"note,omitempty"`
	Bpm           *int64          `protobuf:"varint,8,opt,name=bpm,proto3,oneof" json:"bpm,omitempty"`
	UpdateImage   *bool           `protobuf:"varint,9,opt,name=update_image,json=updateImage,proto3,oneof" json:"update_image,omitempty"`
	UpdateFile    *bool           `protobuf:"varint,10,opt,name=update_file,json=updateFile,proto3,oneof" json:"update_file,omitempty"`
	UpdateArchive *bool           `protobuf:"varint,11,opt,name=update_archive,json=updateArchive,proto3,oneof" json:"update_archive,omitempty"`
	Range         *Range          `protobuf:"bytes,12,opt,name=range,proto3,oneof" json:"range,omitempty"`
}

func (x *UpdateBeatRequest) Reset() {
	*x = UpdateBeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBeatRequest) ProtoMessage() {}

func (x *UpdateBeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBeatRequest.ProtoReflect.Descriptor instead.
func (*UpdateBeatRequest) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateBeatRequest) GetBeatId() string {
	if x != nil {
		return x.BeatId
	}
	return ""
}

func (x *UpdateBeatRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateBeatRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateBeatRequest) GetBeatGenre() []string {
	if x != nil {
		return x.BeatGenre
	}
	return nil
}

func (x *UpdateBeatRequest) GetBeatTag() []string {
	if x != nil {
		return x.BeatTag
	}
	return nil
}

func (x *UpdateBeatRequest) GetBeatMood() []string {
	if x != nil {
		return x.BeatMood
	}
	return nil
}

func (x *UpdateBeatRequest) GetNote() *UpdateBeatNote {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *UpdateBeatRequest) GetBpm() int64 {
	if x != nil && x.Bpm != nil {
		return *x.Bpm
	}
	return 0
}

func (x *UpdateBeatRequest) GetUpdateImage() bool {
	if x != nil && x.UpdateImage != nil {
		return *x.UpdateImage
	}
	return false
}

func (x *UpdateBeatRequest) GetUpdateFile() bool {
	if x != nil && x.UpdateFile != nil {
		return *x.UpdateFile
	}
	return false
}

func (x *UpdateBeatRequest) GetUpdateArchive() bool {
	if x != nil && x.UpdateArchive != nil {
		return *x.UpdateArchive
	}
	return false
}

func (x *UpdateBeatRequest) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

type DeleteBeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeatId string `protobuf:"bytes,1,opt,name=beat_id,json=beatId,proto3" json:"beat_id,omitempty"`
}

func (x *DeleteBeatRequest) Reset() {
	*x = DeleteBeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBeatRequest) ProtoMessage() {}

func (x *DeleteBeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBeatRequest.ProtoReflect.Descriptor instead.
func (*DeleteBeatRequest) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteBeatRequest) GetBeatId() string {
	if x != nil {
		return x.BeatId
	}
	return ""
}

type DeleteBeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteBeatResponse) Reset() {
	*x = DeleteBeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBeatResponse) ProtoMessage() {}

func (x *DeleteBeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBeatResponse.ProtoReflect.Descriptor instead.
func (*DeleteBeatResponse) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{20}
}

type UpdateBeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileUploadUrl    *string `protobuf:"bytes,1,opt,name=file_upload_url,json=fileUploadUrl,proto3,oneof" json:"file_upload_url,omitempty"`
	ImageUploadUrl   *string `protobuf:"bytes,2,opt,name=image_upload_url,json=imageUploadUrl,proto3,oneof" json:"image_upload_url,omitempty"`
	ArchiveUploadUrl *string `protobuf:"bytes,3,opt,name=archive_upload_url,json=archiveUploadUrl,proto3,oneof" json:"archive_upload_url,omitempty"`
}

func (x *UpdateBeatResponse) Reset() {
	*x = UpdateBeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBeatResponse) ProtoMessage() {}

func (x *UpdateBeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBeatResponse.ProtoReflect.Descriptor instead.
func (*UpdateBeatResponse) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateBeatResponse) GetFileUploadUrl() string {
	if x != nil && x.FileUploadUrl != nil {
		return *x.FileUploadUrl
	}
	return ""
}

func (x *UpdateBeatResponse) GetImageUploadUrl() string {
	if x != nil && x.ImageUploadUrl != nil {
		return *x.ImageUploadUrl
	}
	return ""
}

func (x *UpdateBeatResponse) GetArchiveUploadUrl() string {
	if x != nil && x.ArchiveUploadUrl != nil {
		return *x.ArchiveUploadUrl
	}
	return ""
}

type AcquireBeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeatId string `protobuf:"bytes,1,opt,name=beat_id,json=beatId,proto3" json:"beat_id,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *AcquireBeatRequest) Reset() {
	*x = AcquireBeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireBeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireBeatRequest) ProtoMessage() {}

func (x *AcquireBeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireBeatRequest.ProtoReflect.Descriptor instead.
func (*AcquireBeatRequest) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{22}
}

func (x *AcquireBeatRequest) GetBeatId() string {
	if x != nil {
		return x.BeatId
	}
	return ""
}

func (x *AcquireBeatRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type AcquireBeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArchiveDownloadUrl string `protobuf:"bytes,1,opt,name=archive_download_url,json=archiveDownloadUrl,proto3" json:"archive_download_url,omitempty"`
}

func (x *AcquireBeatResponse) Reset() {
	*x = AcquireBeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireBeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireBeatResponse) ProtoMessage() {}

func (x *AcquireBeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireBeatResponse.ProtoReflect.Descriptor instead.
func (*AcquireBeatResponse) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{23}
}

func (x *AcquireBeatResponse) GetArchiveDownloadUrl() string {
	if x != nil {
		return x.ArchiveDownloadUrl
	}
	return ""
}

var File_audio_audio_proto protoreflect.FileDescriptor

var file_audio_audio_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x6e, 0x6f, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x05,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x22, 0x95, 0x01, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x3a, 0x64, 0xba, 0x48, 0x61, 0x1a, 0x5f, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x12, 0x24, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x6d,
	0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x61, 0x6e,
	0x20, 0x6f, 0x72, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x20, 0x65, 0x6e, 0x64, 0x1a, 0x29, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x3c, 0x3d, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x65, 0x6e, 0x64, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x22, 0xbb, 0x03, 0x0a, 0x11, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x07, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x06, 0x62, 0x65, 0x61, 0x74, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x62, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x0b, 0x62, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x1e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x62, 0x65, 0x61,
	0x74, 0x5f, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x11, 0xba,
	0x48, 0x0e, 0x92, 0x01, 0x0b, 0x10, 0x14, 0x18, 0x01, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x09, 0x62, 0x65, 0x61, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x62,
	0x65, 0x61, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x11, 0xba,
	0x48, 0x0e, 0x92, 0x01, 0x0b, 0x10, 0x14, 0x18, 0x01, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x07, 0x62, 0x65, 0x61, 0x74, 0x54, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x09, 0x62, 0x65, 0x61,
	0x74, 0x5f, 0x6d, 0x6f, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x11, 0xba, 0x48,
	0x0e, 0x92, 0x01, 0x0b, 0x10, 0x14, 0x18, 0x01, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52,
	0x08, 0x62, 0x65, 0x61, 0x74, 0x4d, 0x6f, 0x6f, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x03,
	0x62, 0x70, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x22, 0x05,
	0x18, 0xd8, 0x04, 0x20, 0x09, 0x52, 0x03, 0x62, 0x70, 0x6d, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12,
	0x2c, 0x0a, 0x12, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x55, 0x0a,
	0x09, 0x42, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f,
	0x6e, 0x79, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x73, 0x65, 0x75, 0x64,
	0x6f, 0x6e, 0x79, 0x6d, 0x22, 0x4e, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12,
	0x22, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x22, 0x51, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x73,
	0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x1e, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x22, 0xd8, 0x04, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42,
	0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x62,
	0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48,
	0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x06, 0x62, 0x65, 0x61, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x12, 0xba, 0x48, 0x0f, 0x92, 0x01, 0x0c, 0x10, 0x14, 0x18, 0x01, 0x22, 0x06,
	0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x26, 0x0a,
	0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x12, 0xba, 0x48, 0x0f,
	0x92, 0x01, 0x0c, 0x10, 0x14, 0x18, 0x01, 0x22, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52,
	0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x12, 0xba, 0x48, 0x0f, 0x92, 0x01, 0x0c, 0x10, 0x14, 0x18, 0x01, 0x22, 0x06,
	0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x01,
	0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0c, 0x62, 0x65, 0x61,
	0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x02, 0x52, 0x0b, 0x62, 0x65, 0x61,
	0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x09, 0x62,
	0x65, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x1e, 0x48, 0x03, 0x52, 0x08, 0x62, 0x65, 0x61,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x03, 0x62, 0x70, 0x6d, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x22, 0x05, 0x18, 0xd8, 0x04, 0x20,
	0x09, 0x48, 0x04, 0x52, 0x03, 0x62, 0x70, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x48, 0x05, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09, 0xba, 0x48, 0x06, 0x22,
	0x04, 0x18, 0x64, 0x20, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x28, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0c, 0x69, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x65, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x62, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x62, 0x70, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x22, 0x8f, 0x04, 0x0a, 0x04, 0x42, 0x65, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x62,
	0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x65,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x62, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x42, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x09, 0x62, 0x65, 0x61, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x6f, 0x6f, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x62, 0x70, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x62, 0x70, 0x6d, 0x12,
	0x22, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69,
	0x73, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x68, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42,
	0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x05, 0x62, 0x65, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x42, 0x65, 0x61, 0x74, 0x52, 0x05, 0x62, 0x65, 0x61,
	0x74, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x6e,
	0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x54, 0x61, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x6d, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x4d, 0x6f, 0x6f, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x6d, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x0a, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x35, 0x0a, 0x08, 0x54, 0x61, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a,
	0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x61, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x09, 0x4d, 0x6f, 0x6f, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x38, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x0e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x05,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x22, 0xf9, 0x04, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x62,
	0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48,
	0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x06, 0x62, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x1e, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0xf4,
	0x03, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0a, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x11, 0xba, 0x48, 0x0e, 0x92, 0x01, 0x0b, 0x10,
	0x14, 0x18, 0x01, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x62, 0x65, 0x61, 0x74,
	0x47, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x61,
	0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x11, 0xba, 0x48, 0x0e, 0x92, 0x01, 0x0b, 0x10,
	0x14, 0x18, 0x01, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x07, 0x62, 0x65, 0x61, 0x74,
	0x54, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x09, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x6f, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x11, 0xba, 0x48, 0x0e, 0x92, 0x01, 0x0b, 0x10, 0x14,
	0x18, 0x01, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x62, 0x65, 0x61, 0x74, 0x4d,
	0x6f, 0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x02, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x03, 0x62, 0x70, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x0a, 0xba, 0x48, 0x07, 0x22, 0x05, 0x18, 0xd8, 0x04, 0x20, 0x09, 0x48, 0x03, 0x52, 0x03,
	0x62, 0x70, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0d,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x07, 0x52,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x62, 0x70, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0x36, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x06, 0x62, 0x65, 0x61, 0x74, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xe3, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x10, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x5a, 0x0a, 0x12, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x62,
	0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48,
	0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x06, 0x62, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x47, 0x0a, 0x13, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x42, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x2a, 0x1d, 0x0a, 0x05, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10, 0x01, 0x2a, 0x1a, 0x0a, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x45, 0x53, 0x43, 0x10, 0x01, 0x32, 0xcb, 0x04, 0x0a, 0x0b, 0x42, 0x65, 0x61, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x65, 0x61, 0x74, 0x12, 0x18, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d,
	0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x65, 0x61, 0x74, 0x12, 0x4e, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0b, 0x12, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x65, 0x61, 0x74, 0x73, 0x12, 0x61, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x74, 0x12, 0x18, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x32, 0x13, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2f, 0x7b, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0x5e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x65, 0x61, 0x74, 0x12, 0x18,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x65, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2f, 0x7b, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0x63, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x1b, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x65, 0x61, 0x74, 0x2f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x6c, 0x0a, 0x0b, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x42, 0x65, 0x61, 0x74, 0x12, 0x19, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x41, 0x63, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x42,
	0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x65, 0x61, 0x74,
	0x73, 0x2f, 0x7b, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x4d, 0x41, 0x58, 0x58, 0x58, 0x49, 0x4d, 0x55, 0x53, 0x2d, 0x74, 0x72, 0x6f, 0x70,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x6d, 0x69, 0x6c, 0x6b, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x2f, 0x62,
	0x65, 0x61, 0x74, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x3b, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_audio_audio_proto_rawDescOnce sync.Once
	file_audio_audio_proto_rawDescData = file_audio_audio_proto_rawDesc
)

func file_audio_audio_proto_rawDescGZIP() []byte {
	file_audio_audio_proto_rawDescOnce.Do(func() {
		file_audio_audio_proto_rawDescData = protoimpl.X.CompressGZIP(file_audio_audio_proto_rawDescData)
	})
	return file_audio_audio_proto_rawDescData
}

var file_audio_audio_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_audio_audio_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_audio_audio_proto_goTypes = []any{
	(Scale)(0),                    // 0: audio.Scale
	(Order)(0),                    // 1: audio.Order
	(*UploadBeatNote)(nil),        // 2: audio.UploadBeatNote
	(*Range)(nil),                 // 3: audio.Range
	(*UploadBeatRequest)(nil),     // 4: audio.UploadBeatRequest
	(*UploadBeatResponse)(nil),    // 5: audio.UploadBeatResponse
	(*Beatmaker)(nil),             // 6: audio.Beatmaker
	(*OrderBy)(nil),               // 7: audio.OrderBy
	(*GetBeatsNote)(nil),          // 8: audio.GetBeatsNote
	(*GetBeatsRequest)(nil),       // 9: audio.GetBeatsRequest
	(*Beat)(nil),                  // 10: audio.Beat
	(*Pagination)(nil),            // 11: audio.Pagination
	(*GetBeatsResponse)(nil),      // 12: audio.GetBeatsResponse
	(*GetBeatParamsRequest)(nil),  // 13: audio.GetBeatParamsRequest
	(*GetBeatParamsResponse)(nil), // 14: audio.GetBeatParamsResponse
	(*GenreParam)(nil),            // 15: audio.GenreParam
	(*TagParam)(nil),              // 16: audio.TagParam
	(*MoodParam)(nil),             // 17: audio.MoodParam
	(*NoteParam)(nil),             // 18: audio.NoteParam
	(*UpdateBeatNote)(nil),        // 19: audio.UpdateBeatNote
	(*UpdateBeatRequest)(nil),     // 20: audio.UpdateBeatRequest
	(*DeleteBeatRequest)(nil),     // 21: audio.DeleteBeatRequest
	(*DeleteBeatResponse)(nil),    // 22: audio.DeleteBeatResponse
	(*UpdateBeatResponse)(nil),    // 23: audio.UpdateBeatResponse
	(*AcquireBeatRequest)(nil),    // 24: audio.AcquireBeatRequest
	(*AcquireBeatResponse)(nil),   // 25: audio.AcquireBeatResponse
	(*timestamppb.Timestamp)(nil), // 26: google.protobuf.Timestamp
}
var file_audio_audio_proto_depIdxs = []int32{
	0,  // 0: audio.UploadBeatNote.scale:type_name -> audio.Scale
	2,  // 1: audio.UploadBeatRequest.note:type_name -> audio.UploadBeatNote
	3,  // 2: audio.UploadBeatRequest.range:type_name -> audio.Range
	1,  // 3: audio.OrderBy.order:type_name -> audio.Order
	0,  // 4: audio.GetBeatsNote.scale:type_name -> audio.Scale
	8,  // 5: audio.GetBeatsRequest.note:type_name -> audio.GetBeatsNote
	7,  // 6: audio.GetBeatsRequest.order_by:type_name -> audio.OrderBy
	6,  // 7: audio.Beat.beatmaker:type_name -> audio.Beatmaker
	8,  // 8: audio.Beat.note:type_name -> audio.GetBeatsNote
	3,  // 9: audio.Beat.range:type_name -> audio.Range
	26, // 10: audio.Beat.created_at:type_name -> google.protobuf.Timestamp
	11, // 11: audio.GetBeatsResponse.pagination:type_name -> audio.Pagination
	10, // 12: audio.GetBeatsResponse.beats:type_name -> audio.Beat
	15, // 13: audio.GetBeatParamsResponse.genres:type_name -> audio.GenreParam
	16, // 14: audio.GetBeatParamsResponse.tags:type_name -> audio.TagParam
	17, // 15: audio.GetBeatParamsResponse.moods:type_name -> audio.MoodParam
	18, // 16: audio.GetBeatParamsResponse.notes:type_name -> audio.NoteParam
	0,  // 17: audio.UpdateBeatNote.scale:type_name -> audio.Scale
	19, // 18: audio.UpdateBeatRequest.note:type_name -> audio.UpdateBeatNote
	3,  // 19: audio.UpdateBeatRequest.range:type_name -> audio.Range
	4,  // 20: audio.BeatService.UploadBeat:input_type -> audio.UploadBeatRequest
	9,  // 21: audio.BeatService.GetBeats:input_type -> audio.GetBeatsRequest
	20, // 22: audio.BeatService.UpdateBeat:input_type -> audio.UpdateBeatRequest
	21, // 23: audio.BeatService.DeleteBeat:input_type -> audio.DeleteBeatRequest
	13, // 24: audio.BeatService.GetBeatParams:input_type -> audio.GetBeatParamsRequest
	24, // 25: audio.BeatService.AcquireBeat:input_type -> audio.AcquireBeatRequest
	5,  // 26: audio.BeatService.UploadBeat:output_type -> audio.UploadBeatResponse
	12, // 27: audio.BeatService.GetBeats:output_type -> audio.GetBeatsResponse
	23, // 28: audio.BeatService.UpdateBeat:output_type -> audio.UpdateBeatResponse
	22, // 29: audio.BeatService.DeleteBeat:output_type -> audio.DeleteBeatResponse
	14, // 30: audio.BeatService.GetBeatParams:output_type -> audio.GetBeatParamsResponse
	25, // 31: audio.BeatService.AcquireBeat:output_type -> audio.AcquireBeatResponse
	26, // [26:32] is the sub-list for method output_type
	20, // [20:26] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_audio_audio_proto_init() }
func file_audio_audio_proto_init() {
	if File_audio_audio_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_audio_audio_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*UploadBeatNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*UploadBeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UploadBeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Beatmaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*OrderBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetBeatsNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetBeatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Beat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetBeatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetBeatParamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GetBeatParamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GenreParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*TagParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*MoodParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*NoteParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateBeatNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateBeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteBeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteBeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateBeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*AcquireBeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*AcquireBeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_audio_audio_proto_msgTypes[7].OneofWrappers = []any{}
	file_audio_audio_proto_msgTypes[18].OneofWrappers = []any{}
	file_audio_audio_proto_msgTypes[21].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_audio_audio_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_audio_audio_proto_goTypes,
		DependencyIndexes: file_audio_audio_proto_depIdxs,
		EnumInfos:         file_audio_audio_proto_enumTypes,
		MessageInfos:      file_audio_audio_proto_msgTypes,
	}.Build()
	File_audio_audio_proto = out.File
	file_audio_audio_proto_rawDesc = nil
	file_audio_audio_proto_goTypes = nil
	file_audio_audio_proto_depIdxs = nil
}
