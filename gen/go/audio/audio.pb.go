// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.1
// source: audio/audio.proto

package audiov1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Scale int32

const (
	Scale_MINOR Scale = 0
	Scale_MAJOR Scale = 1
)

// Enum value maps for Scale.
var (
	Scale_name = map[int32]string{
		0: "MINOR",
		1: "MAJOR",
	}
	Scale_value = map[string]int32{
		"MINOR": 0,
		"MAJOR": 1,
	}
)

func (x Scale) Enum() *Scale {
	p := new(Scale)
	*p = x
	return p
}

func (x Scale) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scale) Descriptor() protoreflect.EnumDescriptor {
	return file_audio_audio_proto_enumTypes[0].Descriptor()
}

func (Scale) Type() protoreflect.EnumType {
	return &file_audio_audio_proto_enumTypes[0]
}

func (x Scale) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Scale.Descriptor instead.
func (Scale) EnumDescriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{0}
}

type UploadBeatNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteId int64 `protobuf:"varint,1,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	Scale  Scale `protobuf:"varint,2,opt,name=scale,proto3,enum=audio.Scale" json:"scale,omitempty"`
}

func (x *UploadBeatNote) Reset() {
	*x = UploadBeatNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadBeatNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadBeatNote) ProtoMessage() {}

func (x *UploadBeatNote) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadBeatNote.ProtoReflect.Descriptor instead.
func (*UploadBeatNote) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{0}
}

func (x *UploadBeatNote) GetNoteId() int64 {
	if x != nil {
		return x.NoteId
	}
	return 0
}

func (x *UploadBeatNote) GetScale() Scale {
	if x != nil {
		return x.Scale
	}
	return Scale_MINOR
}

type UploadBeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeatId      int64           `protobuf:"varint,1,opt,name=beat_id,json=beatId,proto3" json:"beat_id,omitempty"`
	BeatmakerId int64           `protobuf:"varint,2,opt,name=beatmaker_id,json=beatmakerId,proto3" json:"beatmaker_id,omitempty"`
	Name        string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string          `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	BeatGenre   []int64         `protobuf:"varint,5,rep,packed,name=beat_genre,json=beatGenre,proto3" json:"beat_genre,omitempty"`
	BeatTag     []int64         `protobuf:"varint,6,rep,packed,name=beat_tag,json=beatTag,proto3" json:"beat_tag,omitempty"`
	BeatMood    []int64         `protobuf:"varint,7,rep,packed,name=beat_mood,json=beatMood,proto3" json:"beat_mood,omitempty"`
	Note        *UploadBeatNote `protobuf:"bytes,8,opt,name=note,proto3" json:"note,omitempty"`
	Bpm         int64           `protobuf:"varint,9,opt,name=bpm,proto3" json:"bpm,omitempty"`
}

func (x *UploadBeatRequest) Reset() {
	*x = UploadBeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadBeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadBeatRequest) ProtoMessage() {}

func (x *UploadBeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadBeatRequest.ProtoReflect.Descriptor instead.
func (*UploadBeatRequest) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{1}
}

func (x *UploadBeatRequest) GetBeatId() int64 {
	if x != nil {
		return x.BeatId
	}
	return 0
}

func (x *UploadBeatRequest) GetBeatmakerId() int64 {
	if x != nil {
		return x.BeatmakerId
	}
	return 0
}

func (x *UploadBeatRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadBeatRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UploadBeatRequest) GetBeatGenre() []int64 {
	if x != nil {
		return x.BeatGenre
	}
	return nil
}

func (x *UploadBeatRequest) GetBeatTag() []int64 {
	if x != nil {
		return x.BeatTag
	}
	return nil
}

func (x *UploadBeatRequest) GetBeatMood() []int64 {
	if x != nil {
		return x.BeatMood
	}
	return nil
}

func (x *UploadBeatRequest) GetNote() *UploadBeatNote {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *UploadBeatRequest) GetBpm() int64 {
	if x != nil {
		return x.Bpm
	}
	return 0
}

type UploadBeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileUploadUrl  string `protobuf:"bytes,1,opt,name=file_upload_url,json=fileUploadUrl,proto3" json:"file_upload_url,omitempty"`
	ImageUploadUrl string `protobuf:"bytes,2,opt,name=image_upload_url,json=imageUploadUrl,proto3" json:"image_upload_url,omitempty"`
}

func (x *UploadBeatResponse) Reset() {
	*x = UploadBeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadBeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadBeatResponse) ProtoMessage() {}

func (x *UploadBeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadBeatResponse.ProtoReflect.Descriptor instead.
func (*UploadBeatResponse) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{2}
}

func (x *UploadBeatResponse) GetFileUploadUrl() string {
	if x != nil {
		return x.FileUploadUrl
	}
	return ""
}

func (x *UploadBeatResponse) GetImageUploadUrl() string {
	if x != nil {
		return x.ImageUploadUrl
	}
	return ""
}

type Beatmaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username  string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Pseudonym string `protobuf:"bytes,3,opt,name=pseudonym,proto3" json:"pseudonym,omitempty"`
}

func (x *Beatmaker) Reset() {
	*x = Beatmaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Beatmaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Beatmaker) ProtoMessage() {}

func (x *Beatmaker) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Beatmaker.ProtoReflect.Descriptor instead.
func (*Beatmaker) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{3}
}

func (x *Beatmaker) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Beatmaker) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Beatmaker) GetPseudonym() string {
	if x != nil {
		return x.Pseudonym
	}
	return ""
}

type GetBeatNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Scale Scale  `protobuf:"varint,2,opt,name=scale,proto3,enum=audio.Scale" json:"scale,omitempty"`
}

func (x *GetBeatNote) Reset() {
	*x = GetBeatNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBeatNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBeatNote) ProtoMessage() {}

func (x *GetBeatNote) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBeatNote.ProtoReflect.Descriptor instead.
func (*GetBeatNote) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{4}
}

func (x *GetBeatNote) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetBeatNote) GetScale() Scale {
	if x != nil {
		return x.Scale
	}
	return Scale_MINOR
}

type GetBeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeatId int64 `protobuf:"varint,1,opt,name=beat_id,json=beatId,proto3" json:"beat_id,omitempty"`
}

func (x *GetBeatRequest) Reset() {
	*x = GetBeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBeatRequest) ProtoMessage() {}

func (x *GetBeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBeatRequest.ProtoReflect.Descriptor instead.
func (*GetBeatRequest) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{5}
}

func (x *GetBeatRequest) GetBeatId() int64 {
	if x != nil {
		return x.BeatId
	}
	return 0
}

type GetBeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string       `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Beatmaker   *Beatmaker   `protobuf:"bytes,4,opt,name=beatmaker,proto3" json:"beatmaker,omitempty"`
	BeatGenre   []string     `protobuf:"bytes,5,rep,name=beat_genre,json=beatGenre,proto3" json:"beat_genre,omitempty"`
	BeatTag     []string     `protobuf:"bytes,6,rep,name=beat_tag,json=beatTag,proto3" json:"beat_tag,omitempty"`
	BeatMood    []string     `protobuf:"bytes,7,rep,name=beat_mood,json=beatMood,proto3" json:"beat_mood,omitempty"`
	Note        *GetBeatNote `protobuf:"bytes,8,opt,name=note,proto3" json:"note,omitempty"`
	Bpm         int64        `protobuf:"varint,9,opt,name=bpm,proto3" json:"bpm,omitempty"`
}

func (x *GetBeatResponse) Reset() {
	*x = GetBeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBeatResponse) ProtoMessage() {}

func (x *GetBeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBeatResponse.ProtoReflect.Descriptor instead.
func (*GetBeatResponse) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{6}
}

func (x *GetBeatResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetBeatResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetBeatResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetBeatResponse) GetBeatmaker() *Beatmaker {
	if x != nil {
		return x.Beatmaker
	}
	return nil
}

func (x *GetBeatResponse) GetBeatGenre() []string {
	if x != nil {
		return x.BeatGenre
	}
	return nil
}

func (x *GetBeatResponse) GetBeatTag() []string {
	if x != nil {
		return x.BeatTag
	}
	return nil
}

func (x *GetBeatResponse) GetBeatMood() []string {
	if x != nil {
		return x.BeatMood
	}
	return nil
}

func (x *GetBeatResponse) GetNote() *GetBeatNote {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *GetBeatResponse) GetBpm() int64 {
	if x != nil {
		return x.Bpm
	}
	return 0
}

type GetBeatParamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBeatParamsRequest) Reset() {
	*x = GetBeatParamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBeatParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBeatParamsRequest) ProtoMessage() {}

func (x *GetBeatParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBeatParamsRequest.ProtoReflect.Descriptor instead.
func (*GetBeatParamsRequest) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{7}
}

type GetBeatParamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Genres []*Genre `protobuf:"bytes,1,rep,name=genres,proto3" json:"genres,omitempty"`
	Tags   []*Tag   `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	Moods  []*Mood  `protobuf:"bytes,3,rep,name=moods,proto3" json:"moods,omitempty"`
	Notes  []*Note  `protobuf:"bytes,4,rep,name=notes,proto3" json:"notes,omitempty"`
}

func (x *GetBeatParamsResponse) Reset() {
	*x = GetBeatParamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBeatParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBeatParamsResponse) ProtoMessage() {}

func (x *GetBeatParamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBeatParamsResponse.ProtoReflect.Descriptor instead.
func (*GetBeatParamsResponse) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{8}
}

func (x *GetBeatParamsResponse) GetGenres() []*Genre {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *GetBeatParamsResponse) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GetBeatParamsResponse) GetMoods() []*Mood {
	if x != nil {
		return x.Moods
	}
	return nil
}

func (x *GetBeatParamsResponse) GetNotes() []*Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

type Genre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenreId int64  `protobuf:"varint,1,opt,name=genre_id,json=genreId,proto3" json:"genre_id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Genre) Reset() {
	*x = Genre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Genre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Genre) ProtoMessage() {}

func (x *Genre) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Genre.ProtoReflect.Descriptor instead.
func (*Genre) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{9}
}

func (x *Genre) GetGenreId() int64 {
	if x != nil {
		return x.GenreId
	}
	return 0
}

func (x *Genre) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId int64  `protobuf:"varint,1,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{10}
}

func (x *Tag) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Mood struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoodId int64  `protobuf:"varint,1,opt,name=mood_id,json=moodId,proto3" json:"mood_id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Mood) Reset() {
	*x = Mood{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mood) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mood) ProtoMessage() {}

func (x *Mood) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mood.ProtoReflect.Descriptor instead.
func (*Mood) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{11}
}

func (x *Mood) GetMoodId() int64 {
	if x != nil {
		return x.MoodId
	}
	return 0
}

func (x *Mood) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteId int64  `protobuf:"varint,1,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Note) Reset() {
	*x = Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Note) ProtoMessage() {}

func (x *Note) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Note.ProtoReflect.Descriptor instead.
func (*Note) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{12}
}

func (x *Note) GetNoteId() int64 {
	if x != nil {
		return x.NoteId
	}
	return 0
}

func (x *Note) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetRandomBeatNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Scale Scale  `protobuf:"varint,2,opt,name=scale,proto3,enum=audio.Scale" json:"scale,omitempty"`
}

func (x *GetRandomBeatNote) Reset() {
	*x = GetRandomBeatNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRandomBeatNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRandomBeatNote) ProtoMessage() {}

func (x *GetRandomBeatNote) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRandomBeatNote.ProtoReflect.Descriptor instead.
func (*GetRandomBeatNote) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{13}
}

func (x *GetRandomBeatNote) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetRandomBeatNote) GetScale() Scale {
	if x != nil {
		return x.Scale
	}
	return Scale_MINOR
}

type GetRandomBeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Genre []string           `protobuf:"bytes,1,rep,name=genre,proto3" json:"genre,omitempty"`
	Mood  []string           `protobuf:"bytes,2,rep,name=mood,proto3" json:"mood,omitempty"`
	Tag   []string           `protobuf:"bytes,3,rep,name=tag,proto3" json:"tag,omitempty"`
	Note  *GetRandomBeatNote `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *GetRandomBeatRequest) Reset() {
	*x = GetRandomBeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRandomBeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRandomBeatRequest) ProtoMessage() {}

func (x *GetRandomBeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRandomBeatRequest.ProtoReflect.Descriptor instead.
func (*GetRandomBeatRequest) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{14}
}

func (x *GetRandomBeatRequest) GetGenre() []string {
	if x != nil {
		return x.Genre
	}
	return nil
}

func (x *GetRandomBeatRequest) GetMood() []string {
	if x != nil {
		return x.Mood
	}
	return nil
}

func (x *GetRandomBeatRequest) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *GetRandomBeatRequest) GetNote() *GetRandomBeatNote {
	if x != nil {
		return x.Note
	}
	return nil
}

type GetRandomBeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeatId      int64                  `protobuf:"varint,1,opt,name=beat_id,json=beatId,proto3" json:"beat_id,omitempty"`
	Beatmaker   *Beatmaker             `protobuf:"bytes,2,opt,name=beatmaker,proto3" json:"beatmaker,omitempty"`
	Image       string                 `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Name        string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Genre       []string               `protobuf:"bytes,6,rep,name=genre,proto3" json:"genre,omitempty"`
	Tag         []string               `protobuf:"bytes,7,rep,name=tag,proto3" json:"tag,omitempty"`
	Mood        []string               `protobuf:"bytes,8,rep,name=mood,proto3" json:"mood,omitempty"`
	Note        *GetRandomBeatNote     `protobuf:"bytes,9,opt,name=note,proto3" json:"note,omitempty"`
	Bpm         int64                  `protobuf:"varint,10,opt,name=bpm,proto3" json:"bpm,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *GetRandomBeatResponse) Reset() {
	*x = GetRandomBeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRandomBeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRandomBeatResponse) ProtoMessage() {}

func (x *GetRandomBeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRandomBeatResponse.ProtoReflect.Descriptor instead.
func (*GetRandomBeatResponse) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{15}
}

func (x *GetRandomBeatResponse) GetBeatId() int64 {
	if x != nil {
		return x.BeatId
	}
	return 0
}

func (x *GetRandomBeatResponse) GetBeatmaker() *Beatmaker {
	if x != nil {
		return x.Beatmaker
	}
	return nil
}

func (x *GetRandomBeatResponse) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *GetRandomBeatResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetRandomBeatResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetRandomBeatResponse) GetGenre() []string {
	if x != nil {
		return x.Genre
	}
	return nil
}

func (x *GetRandomBeatResponse) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *GetRandomBeatResponse) GetMood() []string {
	if x != nil {
		return x.Mood
	}
	return nil
}

func (x *GetRandomBeatResponse) GetNote() *GetRandomBeatNote {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *GetRandomBeatResponse) GetBpm() int64 {
	if x != nil {
		return x.Bpm
	}
	return 0
}

func (x *GetRandomBeatResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type GetBeatmakerBeatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeatmakerId int64 `protobuf:"varint,1,opt,name=beatmaker_id,json=beatmakerId,proto3" json:"beatmaker_id,omitempty"`
}

func (x *GetBeatmakerBeatsRequest) Reset() {
	*x = GetBeatmakerBeatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBeatmakerBeatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBeatmakerBeatsRequest) ProtoMessage() {}

func (x *GetBeatmakerBeatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBeatmakerBeatsRequest.ProtoReflect.Descriptor instead.
func (*GetBeatmakerBeatsRequest) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{16}
}

func (x *GetBeatmakerBeatsRequest) GetBeatmakerId() int64 {
	if x != nil {
		return x.BeatmakerId
	}
	return 0
}

type GetBeatmakerBeatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beats []*GetBeatResponse `protobuf:"bytes,1,rep,name=beats,proto3" json:"beats,omitempty"`
}

func (x *GetBeatmakerBeatsResponse) Reset() {
	*x = GetBeatmakerBeatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_audio_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBeatmakerBeatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBeatmakerBeatsResponse) ProtoMessage() {}

func (x *GetBeatmakerBeatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audio_audio_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBeatmakerBeatsResponse.ProtoReflect.Descriptor instead.
func (*GetBeatmakerBeatsResponse) Descriptor() ([]byte, []int) {
	return file_audio_audio_proto_rawDescGZIP(), []int{17}
}

func (x *GetBeatmakerBeatsResponse) GetBeats() []*GetBeatResponse {
	if x != nil {
		return x.Beats
	}
	return nil
}

var File_audio_audio_proto protoreflect.FileDescriptor

var file_audio_audio_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x56, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x6e, 0x6f, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22,
	0x02, 0x20, 0x00, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x05, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x22,
	0xcc, 0x04, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52,
	0x06, 0x62, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0c, 0x62, 0x65, 0x61, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x0b, 0x62, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x1e, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0xf4,
	0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x61, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x07, 0x62, 0x65, 0x61, 0x74, 0x54, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x61, 0x74,
	0x5f, 0x6d, 0x6f, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x62, 0x65, 0x61,
	0x74, 0x4d, 0x6f, 0x6f, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x42, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x03, 0x62, 0x70, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0xba,
	0x48, 0x07, 0x22, 0x05, 0x18, 0xd8, 0x04, 0x20, 0x09, 0x52, 0x03, 0x62, 0x70, 0x6d, 0x3a, 0xfd,
	0x01, 0xba, 0x48, 0xf9, 0x01, 0x1a, 0x54, 0x0a, 0x13, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x67, 0x65,
	0x6e, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x61, 0x6c,
	0x6c, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x69, 0x64, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x74,
	0x20, 0x62, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x1d, 0x74, 0x68,
	0x69, 0x73, 0x2e, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x2e, 0x61, 0x6c,
	0x6c, 0x28, 0x6d, 0x2c, 0x20, 0x6d, 0x20, 0x3e, 0x20, 0x30, 0x29, 0x1a, 0x4e, 0x0a, 0x11, 0x62,
	0x65, 0x61, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x1c, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x61, 0x67, 0x20, 0x69, 0x64, 0x73, 0x20, 0x6d, 0x75,
	0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x1b,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x61, 0x6c,
	0x6c, 0x28, 0x6d, 0x2c, 0x20, 0x6d, 0x20, 0x3e, 0x20, 0x30, 0x29, 0x1a, 0x51, 0x0a, 0x12, 0x62,
	0x65, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x1d, 0x61, 0x6c, 0x6c, 0x20, 0x6d, 0x6f, 0x6f, 0x64, 0x20, 0x69, 0x64, 0x73, 0x20,
	0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x1a, 0x1c, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x6f, 0x64,
	0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x6d, 0x2c, 0x20, 0x6d, 0x20, 0x3e, 0x20, 0x30, 0x29, 0x22, 0x66,
	0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66,
	0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x55, 0x0a, 0x09, 0x42, 0x65, 0x61, 0x74, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x6e, 0x79, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x6e, 0x79, 0x6d, 0x22, 0x45, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x05, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x22, 0x32, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x20, 0x00,
	0x52, 0x06, 0x62, 0x65, 0x61, 0x74, 0x49, 0x64, 0x22, 0x98, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x09, 0x62, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x42, 0x65,
	0x61, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x09, 0x62, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x61, 0x74, 0x47, 0x65, 0x6e, 0x72,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x61, 0x74, 0x54, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x65, 0x61, 0x74, 0x4d, 0x6f, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x70, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x62, 0x70, 0x6d, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x65,
	0x6e, 0x72, 0x65, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x6d,
	0x6f, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x4d, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x6d, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x21,
	0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x22, 0x36, 0x0a, 0x05, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x65,
	0x6e, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x65,
	0x6e, 0x72, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x03, 0x54, 0x61, 0x67,
	0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x04, 0x4d,
	0x6f, 0x6f, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x6f, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x33, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x42, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x22, 0xb1, 0x03, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x65, 0x6e, 0x72, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x3a, 0xae, 0x02, 0xba, 0x48, 0xaa, 0x02, 0x1a, 0x4a, 0x0a, 0x0e,
	0x67, 0x65, 0x6e, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1e,
	0x61, 0x6c, 0x6c, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x69, 0x64, 0x73, 0x20, 0x6d, 0x75,
	0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x18,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x6d,
	0x2c, 0x20, 0x6d, 0x20, 0x3e, 0x20, 0x30, 0x29, 0x1a, 0x44, 0x0a, 0x0c, 0x74, 0x61, 0x67, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x61,
	0x67, 0x20, 0x69, 0x64, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x16, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x74, 0x61, 0x67,
	0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x6d, 0x2c, 0x20, 0x6d, 0x20, 0x3e, 0x20, 0x30, 0x29, 0x1a, 0x47,
	0x0a, 0x0d, 0x6d, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1d, 0x61, 0x6c, 0x6c, 0x20, 0x6d, 0x6f, 0x6f, 0x64, 0x20, 0x69, 0x64, 0x73, 0x20, 0x6d, 0x75,
	0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x17,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x6f, 0x6f, 0x64, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x6d, 0x2c,
	0x20, 0x6d, 0x20, 0x3e, 0x20, 0x30, 0x29, 0x1a, 0x4d, 0x0a, 0x13, 0x6e, 0x6f, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x1b,
	0x6e, 0x6f, 0x74, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62,
	0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x73, 0x69, 0x7a, 0x65,
	0x28, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x22, 0xe3, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x62, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x62, 0x65, 0x61,
	0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x42, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x09,
	0x62, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x6f,
	0x64, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x42, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x62, 0x70, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x62, 0x70,
	0x6d, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x46, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x42, 0x65, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0c, 0x62, 0x65, 0x61, 0x74,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x0b, 0x62, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x42, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x05, 0x62, 0x65, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x62, 0x65, 0x61, 0x74, 0x73, 0x2a,
	0x1d, 0x0a, 0x05, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x49, 0x4e, 0x4f,
	0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10, 0x01, 0x32, 0x8a,
	0x04, 0x0a, 0x0b, 0x42, 0x65, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56,
	0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x65, 0x61, 0x74, 0x12, 0x18, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x65, 0x61, 0x74, 0x12, 0x54, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61,
	0x74, 0x12, 0x15, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x65,
	0x61, 0x74, 0x2f, 0x7b, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x63, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x65, 0x61, 0x74, 0x12, 0x1b, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42,
	0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11,
	0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x65, 0x61, 0x74, 0x2f, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x42, 0x65, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x42, 0x65, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x42, 0x65, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x2f, 0x7b, 0x62, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x62, 0x65, 0x61, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x65, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f,
	0x62, 0x65, 0x61, 0x74, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x41, 0x5a, 0x3f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x41, 0x58, 0x58, 0x58, 0x49,
	0x4d, 0x55, 0x53, 0x2d, 0x74, 0x72, 0x6f, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x6d, 0x69, 0x6c,
	0x6b, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x2f, 0x62, 0x65, 0x61, 0x74, 0x66, 0x6c, 0x6f, 0x77, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x3b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_audio_audio_proto_rawDescOnce sync.Once
	file_audio_audio_proto_rawDescData = file_audio_audio_proto_rawDesc
)

func file_audio_audio_proto_rawDescGZIP() []byte {
	file_audio_audio_proto_rawDescOnce.Do(func() {
		file_audio_audio_proto_rawDescData = protoimpl.X.CompressGZIP(file_audio_audio_proto_rawDescData)
	})
	return file_audio_audio_proto_rawDescData
}

var file_audio_audio_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_audio_audio_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_audio_audio_proto_goTypes = []any{
	(Scale)(0),                        // 0: audio.Scale
	(*UploadBeatNote)(nil),            // 1: audio.UploadBeatNote
	(*UploadBeatRequest)(nil),         // 2: audio.UploadBeatRequest
	(*UploadBeatResponse)(nil),        // 3: audio.UploadBeatResponse
	(*Beatmaker)(nil),                 // 4: audio.Beatmaker
	(*GetBeatNote)(nil),               // 5: audio.GetBeatNote
	(*GetBeatRequest)(nil),            // 6: audio.GetBeatRequest
	(*GetBeatResponse)(nil),           // 7: audio.GetBeatResponse
	(*GetBeatParamsRequest)(nil),      // 8: audio.GetBeatParamsRequest
	(*GetBeatParamsResponse)(nil),     // 9: audio.GetBeatParamsResponse
	(*Genre)(nil),                     // 10: audio.Genre
	(*Tag)(nil),                       // 11: audio.Tag
	(*Mood)(nil),                      // 12: audio.Mood
	(*Note)(nil),                      // 13: audio.Note
	(*GetRandomBeatNote)(nil),         // 14: audio.GetRandomBeatNote
	(*GetRandomBeatRequest)(nil),      // 15: audio.GetRandomBeatRequest
	(*GetRandomBeatResponse)(nil),     // 16: audio.GetRandomBeatResponse
	(*GetBeatmakerBeatsRequest)(nil),  // 17: audio.GetBeatmakerBeatsRequest
	(*GetBeatmakerBeatsResponse)(nil), // 18: audio.GetBeatmakerBeatsResponse
	(*timestamppb.Timestamp)(nil),     // 19: google.protobuf.Timestamp
}
var file_audio_audio_proto_depIdxs = []int32{
	0,  // 0: audio.UploadBeatNote.scale:type_name -> audio.Scale
	1,  // 1: audio.UploadBeatRequest.note:type_name -> audio.UploadBeatNote
	0,  // 2: audio.GetBeatNote.scale:type_name -> audio.Scale
	4,  // 3: audio.GetBeatResponse.beatmaker:type_name -> audio.Beatmaker
	5,  // 4: audio.GetBeatResponse.note:type_name -> audio.GetBeatNote
	10, // 5: audio.GetBeatParamsResponse.genres:type_name -> audio.Genre
	11, // 6: audio.GetBeatParamsResponse.tags:type_name -> audio.Tag
	12, // 7: audio.GetBeatParamsResponse.moods:type_name -> audio.Mood
	13, // 8: audio.GetBeatParamsResponse.notes:type_name -> audio.Note
	0,  // 9: audio.GetRandomBeatNote.scale:type_name -> audio.Scale
	14, // 10: audio.GetRandomBeatRequest.note:type_name -> audio.GetRandomBeatNote
	4,  // 11: audio.GetRandomBeatResponse.beatmaker:type_name -> audio.Beatmaker
	14, // 12: audio.GetRandomBeatResponse.note:type_name -> audio.GetRandomBeatNote
	19, // 13: audio.GetRandomBeatResponse.created_at:type_name -> google.protobuf.Timestamp
	7,  // 14: audio.GetBeatmakerBeatsResponse.beats:type_name -> audio.GetBeatResponse
	2,  // 15: audio.BeatService.UploadBeat:input_type -> audio.UploadBeatRequest
	6,  // 16: audio.BeatService.GetBeat:input_type -> audio.GetBeatRequest
	15, // 17: audio.BeatService.GetRandomBeat:input_type -> audio.GetRandomBeatRequest
	17, // 18: audio.BeatService.GetBeatmakerBeats:input_type -> audio.GetBeatmakerBeatsRequest
	8,  // 19: audio.BeatService.GetBeatParams:input_type -> audio.GetBeatParamsRequest
	3,  // 20: audio.BeatService.UploadBeat:output_type -> audio.UploadBeatResponse
	7,  // 21: audio.BeatService.GetBeat:output_type -> audio.GetBeatResponse
	16, // 22: audio.BeatService.GetRandomBeat:output_type -> audio.GetRandomBeatResponse
	18, // 23: audio.BeatService.GetBeatmakerBeats:output_type -> audio.GetBeatmakerBeatsResponse
	9,  // 24: audio.BeatService.GetBeatParams:output_type -> audio.GetBeatParamsResponse
	20, // [20:25] is the sub-list for method output_type
	15, // [15:20] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_audio_audio_proto_init() }
func file_audio_audio_proto_init() {
	if File_audio_audio_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_audio_audio_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*UploadBeatNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*UploadBeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*UploadBeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Beatmaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetBeatNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetBeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetBeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetBeatParamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetBeatParamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Genre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Mood); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GetRandomBeatNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*GetRandomBeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*GetRandomBeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*GetBeatmakerBeatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_audio_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GetBeatmakerBeatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_audio_audio_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_audio_audio_proto_goTypes,
		DependencyIndexes: file_audio_audio_proto_depIdxs,
		EnumInfos:         file_audio_audio_proto_enumTypes,
		MessageInfos:      file_audio_audio_proto_msgTypes,
	}.Build()
	File_audio_audio_proto = out.File
	file_audio_audio_proto_rawDesc = nil
	file_audio_audio_proto_goTypes = nil
	file_audio_audio_proto_depIdxs = nil
}
